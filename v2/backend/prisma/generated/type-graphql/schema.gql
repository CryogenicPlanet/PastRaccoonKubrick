# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateProject {
  _avg: ProjectAvgAggregate
  _count: ProjectCountAggregate
  _max: ProjectMaxAggregate
  _min: ProjectMinAggregate
  _sum: ProjectSumAggregate
}

type AggregateReview {
  _avg: ReviewAvgAggregate
  _count: ReviewCountAggregate
  _max: ReviewMaxAggregate
  _min: ReviewMinAggregate
  _sum: ReviewSumAggregate
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  createManyProject(data: [ProjectCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyReview(data: [ReviewCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createProject(data: ProjectCreateInput!): Project!
  createReview(description: String!, projectName: String!, rating: Int!): Review!
  deleteManyProject(where: ProjectWhereInput): AffectedRowsOutput!
  deleteManyReview(where: ReviewWhereInput): AffectedRowsOutput!
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteReview(where: ReviewWhereUniqueInput!): Review
  updateManyProject(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): AffectedRowsOutput!
  updateManyReview(data: ReviewUpdateManyMutationInput!, where: ReviewWhereInput): AffectedRowsOutput!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  upsertProject(create: ProjectCreateInput!, update: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project!
  upsertReview(create: ReviewCreateInput!, update: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review!
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Project {
  _count: ProjectCount
  id: Int!
  name: String!
  reviews(cursor: ReviewWhereUniqueInput, distinct: [ReviewScalarFieldEnum!], orderBy: [ReviewOrderByWithRelationInput!], skip: Int, take: Int, where: ReviewWhereInput): [Review!]!
}

type ProjectAvgAggregate {
  id: Float
}

input ProjectAvgOrderByAggregateInput {
  id: SortOrder
}

type ProjectCount {
  reviews: Int!
}

type ProjectCountAggregate {
  _all: Int!
  id: Int!
  name: Int!
}

input ProjectCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input ProjectCreateInput {
  name: String!
  reviews: ReviewCreateNestedManyWithoutProjectInput
}

input ProjectCreateManyInput {
  id: Int
  name: String!
}

input ProjectCreateNestedOneWithoutReviewsInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutReviewsInput
  create: ProjectCreateWithoutReviewsInput
}

input ProjectCreateOrConnectWithoutReviewsInput {
  create: ProjectCreateWithoutReviewsInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateWithoutReviewsInput {
  name: String!
}

type ProjectGroupBy {
  _avg: ProjectAvgAggregate
  _count: ProjectCountAggregate
  _max: ProjectMaxAggregate
  _min: ProjectMinAggregate
  _sum: ProjectSumAggregate
  id: Int!
  name: String!
}

type ProjectMaxAggregate {
  id: Int
  name: String
}

input ProjectMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

type ProjectMinAggregate {
  id: Int
  name: String
}

input ProjectMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input ProjectOrderByWithAggregationInput {
  _avg: ProjectAvgOrderByAggregateInput
  _count: ProjectCountOrderByAggregateInput
  _max: ProjectMaxOrderByAggregateInput
  _min: ProjectMinOrderByAggregateInput
  _sum: ProjectSumOrderByAggregateInput
  id: SortOrder
  name: SortOrder
}

input ProjectOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  reviews: ReviewOrderByRelationAggregateInput
}

input ProjectRelationFilter {
  is: ProjectWhereInput
  isNot: ProjectWhereInput
}

enum ProjectScalarFieldEnum {
  id
  name
}

input ProjectScalarWhereWithAggregatesInput {
  AND: [ProjectScalarWhereWithAggregatesInput!]
  NOT: [ProjectScalarWhereWithAggregatesInput!]
  OR: [ProjectScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
}

type ProjectSumAggregate {
  id: Int
}

input ProjectSumOrderByAggregateInput {
  id: SortOrder
}

input ProjectUpdateInput {
  name: StringFieldUpdateOperationsInput
  reviews: ReviewUpdateManyWithoutProjectInput
}

input ProjectUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
}

input ProjectUpdateOneWithoutReviewsInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutReviewsInput
  create: ProjectCreateWithoutReviewsInput
  delete: Boolean
  disconnect: Boolean
  update: ProjectUpdateWithoutReviewsInput
  upsert: ProjectUpsertWithoutReviewsInput
}

input ProjectUpdateWithoutReviewsInput {
  name: StringFieldUpdateOperationsInput
}

input ProjectUpsertWithoutReviewsInput {
  create: ProjectCreateWithoutReviewsInput!
  update: ProjectUpdateWithoutReviewsInput!
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  id: IntFilter
  name: StringFilter
  reviews: ReviewListRelationFilter
}

input ProjectWhereUniqueInput {
  id: Int
  name: String
}

type Query {
  aggregateProject(cursor: ProjectWhereUniqueInput, orderBy: [ProjectOrderByWithRelationInput!], skip: Int, take: Int, where: ProjectWhereInput): AggregateProject!
  aggregateReview(cursor: ReviewWhereUniqueInput, orderBy: [ReviewOrderByWithRelationInput!], skip: Int, take: Int, where: ReviewWhereInput): AggregateReview!
  findFirstProject(cursor: ProjectWhereUniqueInput, distinct: [ProjectScalarFieldEnum!], orderBy: [ProjectOrderByWithRelationInput!], skip: Int, take: Int, where: ProjectWhereInput): Project
  findFirstReview(cursor: ReviewWhereUniqueInput, distinct: [ReviewScalarFieldEnum!], orderBy: [ReviewOrderByWithRelationInput!], skip: Int, take: Int, where: ReviewWhereInput): Review
  groupByProject(by: [ProjectScalarFieldEnum!]!, having: ProjectScalarWhereWithAggregatesInput, orderBy: [ProjectOrderByWithAggregationInput!], skip: Int, take: Int, where: ProjectWhereInput): [ProjectGroupBy!]!
  groupByReview(by: [ReviewScalarFieldEnum!]!, having: ReviewScalarWhereWithAggregatesInput, orderBy: [ReviewOrderByWithAggregationInput!], skip: Int, take: Int, where: ReviewWhereInput): [ReviewGroupBy!]!
  project(where: ProjectWhereUniqueInput!): Project
  projects(cursor: ProjectWhereUniqueInput, distinct: [ProjectScalarFieldEnum!], orderBy: [ProjectOrderByWithRelationInput!], skip: Int, take: Int, where: ProjectWhereInput): [Project!]!
  review(where: ReviewWhereUniqueInput!): Review
  reviews(cursor: ReviewWhereUniqueInput, distinct: [ReviewScalarFieldEnum!], orderBy: [ReviewOrderByWithRelationInput!], skip: Int, take: Int, where: ReviewWhereInput): [Review!]!
}

enum QueryMode {
  default
  insensitive
}

type Review {
  Project: Project
  description: String!
  id: Int!
  projectId: Int
  rating: Int!
}

type ReviewAvgAggregate {
  id: Float
  projectId: Float
  rating: Float
}

input ReviewAvgOrderByAggregateInput {
  id: SortOrder
  projectId: SortOrder
  rating: SortOrder
}

type ReviewCountAggregate {
  _all: Int!
  description: Int!
  id: Int!
  projectId: Int!
  rating: Int!
}

input ReviewCountOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  projectId: SortOrder
  rating: SortOrder
}

input ReviewCreateInput {
  Project: ProjectCreateNestedOneWithoutReviewsInput
  description: String!
  rating: Int!
}

input ReviewCreateManyInput {
  description: String!
  id: Int
  projectId: Int
  rating: Int!
}

input ReviewCreateManyProjectInput {
  description: String!
  id: Int
  rating: Int!
}

input ReviewCreateManyProjectInputEnvelope {
  data: [ReviewCreateManyProjectInput!]!
  skipDuplicates: Boolean
}

input ReviewCreateNestedManyWithoutProjectInput {
  connect: [ReviewWhereUniqueInput!]
  connectOrCreate: [ReviewCreateOrConnectWithoutProjectInput!]
  create: [ReviewCreateWithoutProjectInput!]
  createMany: ReviewCreateManyProjectInputEnvelope
}

input ReviewCreateOrConnectWithoutProjectInput {
  create: ReviewCreateWithoutProjectInput!
  where: ReviewWhereUniqueInput!
}

input ReviewCreateWithoutProjectInput {
  description: String!
  rating: Int!
}

type ReviewGroupBy {
  _avg: ReviewAvgAggregate
  _count: ReviewCountAggregate
  _max: ReviewMaxAggregate
  _min: ReviewMinAggregate
  _sum: ReviewSumAggregate
  description: String!
  id: Int!
  projectId: Int
  rating: Int!
}

input ReviewListRelationFilter {
  every: ReviewWhereInput
  none: ReviewWhereInput
  some: ReviewWhereInput
}

type ReviewMaxAggregate {
  description: String
  id: Int
  projectId: Int
  rating: Int
}

input ReviewMaxOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  projectId: SortOrder
  rating: SortOrder
}

type ReviewMinAggregate {
  description: String
  id: Int
  projectId: Int
  rating: Int
}

input ReviewMinOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  projectId: SortOrder
  rating: SortOrder
}

input ReviewOrderByRelationAggregateInput {
  _count: SortOrder
}

input ReviewOrderByWithAggregationInput {
  _avg: ReviewAvgOrderByAggregateInput
  _count: ReviewCountOrderByAggregateInput
  _max: ReviewMaxOrderByAggregateInput
  _min: ReviewMinOrderByAggregateInput
  _sum: ReviewSumOrderByAggregateInput
  description: SortOrder
  id: SortOrder
  projectId: SortOrder
  rating: SortOrder
}

input ReviewOrderByWithRelationInput {
  Project: ProjectOrderByWithRelationInput
  description: SortOrder
  id: SortOrder
  projectId: SortOrder
  rating: SortOrder
}

enum ReviewScalarFieldEnum {
  description
  id
  projectId
  rating
}

input ReviewScalarWhereInput {
  AND: [ReviewScalarWhereInput!]
  NOT: [ReviewScalarWhereInput!]
  OR: [ReviewScalarWhereInput!]
  description: StringFilter
  id: IntFilter
  projectId: IntNullableFilter
  rating: IntFilter
}

input ReviewScalarWhereWithAggregatesInput {
  AND: [ReviewScalarWhereWithAggregatesInput!]
  NOT: [ReviewScalarWhereWithAggregatesInput!]
  OR: [ReviewScalarWhereWithAggregatesInput!]
  description: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  projectId: IntNullableWithAggregatesFilter
  rating: IntWithAggregatesFilter
}

type ReviewSumAggregate {
  id: Int
  projectId: Int
  rating: Int
}

input ReviewSumOrderByAggregateInput {
  id: SortOrder
  projectId: SortOrder
  rating: SortOrder
}

input ReviewUpdateInput {
  Project: ProjectUpdateOneWithoutReviewsInput
  description: StringFieldUpdateOperationsInput
  rating: IntFieldUpdateOperationsInput
}

input ReviewUpdateManyMutationInput {
  description: StringFieldUpdateOperationsInput
  rating: IntFieldUpdateOperationsInput
}

input ReviewUpdateManyWithWhereWithoutProjectInput {
  data: ReviewUpdateManyMutationInput!
  where: ReviewScalarWhereInput!
}

input ReviewUpdateManyWithoutProjectInput {
  connect: [ReviewWhereUniqueInput!]
  connectOrCreate: [ReviewCreateOrConnectWithoutProjectInput!]
  create: [ReviewCreateWithoutProjectInput!]
  createMany: ReviewCreateManyProjectInputEnvelope
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [ReviewUpdateManyWithWhereWithoutProjectInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutProjectInput!]
}

input ReviewUpdateWithWhereUniqueWithoutProjectInput {
  data: ReviewUpdateWithoutProjectInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpdateWithoutProjectInput {
  description: StringFieldUpdateOperationsInput
  rating: IntFieldUpdateOperationsInput
}

input ReviewUpsertWithWhereUniqueWithoutProjectInput {
  create: ReviewCreateWithoutProjectInput!
  update: ReviewUpdateWithoutProjectInput!
  where: ReviewWhereUniqueInput!
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  Project: ProjectRelationFilter
  description: StringFilter
  id: IntFilter
  projectId: IntNullableFilter
  rating: IntFilter
}

input ReviewWhereUniqueInput {
  id: Int
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Subscription {
  newReview: Review!
}
